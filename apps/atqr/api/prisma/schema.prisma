// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO: Solve challenge status already exists error on second migration
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChallengeStatus {
  Ongoing
  Completed
  Failed
}

model Challenge {
  id              String          @id @db.Uuid
  goal            String
  deadline        DateTime
  price           Int // in cents
  player          Player          @relation(fields: [playerId], references: [id])
  playerId        String          @db.Uuid
  supervisorName  String
  supervisorEmail String
  status          ChallengeStatus @default(Ongoing)
  paymentMethod   String
  creditCardToken String?
  User            User?           @relation(fields: [userId], references: [id])
  userId          String?
  Enrollment      Enrollment[]
}

model Player {
  id         String      @id @db.Uuid
  name       String
  email      String      @unique
  Challenges Challenge[]
}

model User {
  id                   String        @unique
  userName             String
  email                String
  emailConfirmed       Boolean
  playedChallenges     Enrollment[]
  officiatedChallenges Officiation[]
  organizedChallenges  Challenge[]
  paymentMethod        PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
}

model Enrollment {
  id                 String             @unique
  contender          User?              @relation(fields: [userId], references: [id])
  challenge          Challenge          @relation(fields: [challengeId], references: [id])
  userId             String?
  pledge             Int
  outcome            ContenderOutcome
  paymentStatus      PaymentStatus
  paymentMethod      PaymentMethod      @relation(fields: [paymentMethodId], references: [id])
  paymentFundsStatus PaymentFundsStatus
  challengeId        String             @db.Uuid
  paymentMethodId    String
}

model Officiation {
  id              String           @unique
  User            User?            @relation(fields: [userId], references: [id])
  userId          String?
  outcome         ContenderOutcome
  paymentStatus   PaymentStatus
  paymentMethod   PaymentMethod    @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
}

model PaymentMethod {
  id          String        @unique
  User        User[]
  Officiation Officiation[]
  Enrollment  Enrollment[]
}

enum ChallengeRepository {
  challenge
  user
}

enum ContenderOutcome {
  StillPlaying
  Succeeded
  Failed
}

enum PaymentStatus {
  NotDueYet
  Defaulted
  Failed
  Forgiven
  Paid
  Pending
  Refunded
  RefundRequested
}

enum PaymentFundsStatus {
  NotDueYet
  Defaulted
  Failed
  Forgiven
  Paid
  Pending
  Refunded
  RefundRequested
}
