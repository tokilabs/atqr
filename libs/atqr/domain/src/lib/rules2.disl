context Challenges

  enum ChallengeStatus
    # As the challenge cannot proceed without a supervisor or without the funds of challenge being verified
    # the challenge cannot be considered as ongoing until both conditions are met.
    Unverified
    Ongoing
    Accomplished
    Failed
    Overdue
    # To avoid the risk of double charging a failed task should have a final status other than overdue
    # Proposed status: Closed.
    # @Y
    Closed

  enum PaymentMethodType
    CreditCard
    DebitCard

  enum PaymentFundsStatus
    Unverified
    Available
    Denied

  enum SupervisionStatus
    NotRequested
    Requested
    Accepted
    Rejected

  enum ChallengeJudgement
    NotRequested
    Requested
    Judged

  aggregate Challenge
    root Challenge
      @id: Guid
      @price: number
      @deadline: Date
      @goal: string
      @supervisorName: string
      @supervisorEmail: string
      @player: Player
      @paymentMethod?: PaymentMethod
      # Challenge Status should only be set to Ongoing when funds and supervisor are verified!
      @status: ChallengeStatus = ChallengeStatus.Unverified
      @supervisionStatus: SupervisionStatus = SupervisionStatus.NotRequested
      @paymentFundsStatus: PaymentFundsStatus = PaymentFundsStatus.Unverified
      @challengeJudgement: ChallengeJudgement = ChallengeJudgement.NotRequested
      @createdByPlayer: boolean

      /**
       * Creates a new challenge and notifies both the Player and the Supervisor
       */
      createChallenge? @:goal @:supervisorName @:supervisorEmail @:player @:price @:deadline @:paymentMethod
        challengeCreated! :id :goal :supervisorName :supervisorEmail :player :price :deadline :paymentMethod :challengeStatus :supervisorStatus
          rules:
            when @createdByPlayer
              verifyFunds? :challengeId
              sendChallengeCreatedEmailToPlayer? :challengeId
              sendSupervisionRequestedEmail? :challengeId
                supervisionRequested! :challengeId
            else
              sendChallengeCreatedEmailToSupervisor? :challengeId
              sendYouHaveBeenChallengedEmail? :challengeId
                playerChallenged! :challengeId

      acceptSupervisionRequest? :challengeId :supervisorId
        @supervisorStatus = SupervisionStatus.Accepted
        supervisionRequestAccepted! :challengeId :supervisorId
                # if Funds are verified then
                @status = ChallengeStatus.Ongoing
      rejectSupervisionRequest? :challengeId :supervisorId
        @supervisorStatus = SupervisionStatus.Rejected
        supervisionRequestRejected! :challengeId :supervisorId
          sendSupervisorRejectedEmail? :challengeId

      acceptFundsRequest? :challengeId :paymentMethod
          @paymentMethod = PaymentFundsStatus.Available
          fundsAvailable! :challengeId :paymentMethod
          # if Supervisor has accepted the request then
          @status = ChallengeStatus.Ongoing
      rejectFundsRequest? :challengeId :paymentMethod
          @paymentMethod = PaymentFundsStatus.Denied
          fundsDenied! :challengeId :paymentMethod
              sendPaymentMethodDeniedEmail? :challengeId
      inviteNewSupervisor? :challengeId :supervisorName :supervisorEmail
        @supervisorStatus = SupervisionStatus.Requested
        sendSupervisionRequestedEmail? :challengeId
          supervisionRequested! :challengeId

      /**
       * This is a cron job that runs every day and checks if any challenges are overdue
       */
      aDayHasPassed!
        checkChallengeDeadline? :challengeId
          rules:
            when @deadline < Date.now() => deadlineReached! :challengeId

      deadlineReached! :challengeId
        @status = ChallengeStatus.Overdue
        sendJudgementRequestEmail? :challengeId
          @challengeJudgement = ChallengeJudgement.Requested

      judgeChallenge? :challengeId, accomplished: boolean
        @challengeJudgement = ChallengeJudgement.Judged
        @status = accomplished ? ChallengeStatus.Accomplished : ChallengeStatus.Failed
        when accomplished
          challengeAccomplished! :challengeId
            sendChallengeAccomplishedEmail? :challengeId
        else
          challengeFailed! :challengeId
            sendChallengeFailedEmail? :challengeId

    entity Player
      @id: Guid
      @name: string
      @email: string
      @challenges: Challenge[]

      createPlayer? :name :email
        @name = name
        @email = email

        playerCreated! :id :name :email

    entity Payment
        @id: Guid
        verifyFunds? :challenge
        chargeCard? :challenge
