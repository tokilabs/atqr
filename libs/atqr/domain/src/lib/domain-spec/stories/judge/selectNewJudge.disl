ðŸ’¬ SelectNewJudge! challenge: Challenge, id: PlayerId
    NotificationService.SelectNewJudge(challenge, id)
    challenge.

ðŸ’¬ SupervisionRequest! challenge: Challenge, contactJudge: Contact
    user = (find user or create with contactJudge)
    user.addOfficiatedChallenge(challenge)
    NotificationService.SupervisionRequested(challenge, contactJudge)


service NotificationService

    ðŸ’¬ SelectNewJudge! challenge: Challenge, id: PlayerId
        sendEmail
          template: SelectNewJudge
          data: Challenge
          to: challenge.player
        when get the response   ðŸ“£ supervisionRequest
        if(pass X days send again, if pass Y days cancel)

    ðŸ’¬ SupervisionRequested! id: PlayerId ,newJudge: Contact
        sendEmail
          template: JudgeRequested
          data: Challenge
          to: challenge.supervisor
        when get the response   ðŸ“£ judgeAccepted or judgeRejected
        if(pass X days send again, if pass Y days cancel)


entity User

  ðŸ’¬ addOfficiatedChallenge! challenge: Challenge
      officiation = new Officiation(this, challenge)
      this.officiatedChallenges.push(officiation)

      ðŸ“£ addJudge! officiation: Officiation


entity Challenge

    ðŸ’¬ changeParticipationStatus? participationStatus: ParticipationStatus , judgeId: UserId
        challenge.invitees.for(invitee)
            if (invitee.id == judge Id)
                invitee.participationStatus = participationStatus
        challenge.judges.for(judge)
            if (judge.id == judgeId)
                judge.participationStatus = participationStatus

        if(participationStatus == ParticipationStatus.ACCEPTED)
            ðŸ“£ verifyChallengeCanBegin!
        else
            ðŸ“£ deleteJudge!
            ðŸ“£ selectNewJudge!


    ðŸ’¬ addJudge? judge: Officiation
        this.judges.push(judge)

    ðŸ’¬ deleteJudge? judgeId: UserId
        this.judges.for(judge)
            if (judge.id == judgeId)
                this.judges.remove(judge)
