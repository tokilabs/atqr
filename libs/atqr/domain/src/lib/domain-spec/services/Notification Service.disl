domain ATQR

  context Challenges

    service NotificationService
    depends on EmailService
    depends on ChallengeRepository

    sendEmail template: EmailTemplate data: Object, to: EmailAddress
      {{using}} Pug
        parse template.subject with data as :subject
        parse template.body with data as :body
      create new Email ^to with :subject and :body
      send ${it} {{using}} IEmailService

    -> EmailSent! notification: Notification
      if email.requiresUserAction
        if ^notification's messagesSent equals Settings.maxRetries
          email.nextContactDate = null

        else
          let ^days be the result of:
            Settings.retryDelay for amount of ^notification's contactLogs

          email.nextContactDate = last ^notification's contactLog's sentAt + ^days

    ⏰ NewDayStarted!
      for each :notification in NotificationRepository
        where :notification's nextContactDate is Today or before Today
          sendEmail
            template: :notification.emailTemplate
            data: :notification.data
            to: :notification.email

          publish EmailSent! :notification
          // TODO: como enviar eventos especificos dependendo da Notificação?
          // Ex: OfficiationRequestSent! or PlayerAbandonedChallenge!

        // TODO: econtrar um jeito de definir o que fazer APÓS exceder as tentativas
        // caso de uso:
        //    if we've sent more than Settings.maxRetries emails
        //      sendEmail
        //        template: YourContenderNeverShowedUpEmail
        //        data: Challenge
        //        to: :challenge.owner.email
        //
        //      publish InviteeAbandonedTheChallenge! :challengeId :invitee

    //-------------------------------
    // Transactional Messages
    //-------------------------------

    -> ChallengeCreated! :challenge
      sendEmail with ^params
        template: ChallengeCreated
        data: Challenge
        to: :challenge.owner.email

      when :challenge.createdByPlayer

        for each [contact] in :challenge's invitees
          if it's role is Judge
            sendEmail with ^params
              template: YourOfficiationHaveBeenRequested
              data: Challenge
              to: :contact.email

            📢 publish OfficiationRequested!

          if it's role is Player
            sendEmail with ^params
              template: YouHaveBeenChallenged
              data: Challenge
              to: :contact.email

            📢 publish PlayerParticipationRequested!

    -> ChallengeGotANewInvitee! :challenge, invitee: Invitee
        if invitee's role is .Judge
          sendEmail with ^params
            template: YourOfficiationHaveBeenRequested
            data:
              challenge: ^challenge
              invitee: ^invitee
            to: :contact.email

          //TODO: Event for this email?
          sendEmail with ^params
            template: YourContenderRemovedYouAsJudge
            data:
              challenge: ^challenge
              invitee: ^invitee
            to: :contact.email

          📢 publish OfficiationRequested!

        if invitee's role is .Player
          sendEmail
            template: YouHaveBeenChallenged
            data:
              challenge: ^challenge
              invitee: ^invitee
            to: :contact.email

          📢 publish PlayerParticipationRequested!

    //-------------------------------
    // Notification Messages
    //-------------------------------

    -> ContenderAccepted! :enrollment
        sendEmail with params:
          template: YourContenderAcceptedTheChallenge
          data: ^enrollment
          to: ^enrollment.judge.email

    -> ContenderRejected! :challenge
        sendEmail with params:
          template: YourContenderRejectedTheChallenge
          data: ^challenge
          to: ^challenge.owner.email

    -> ContenderIgnored! :challenge
        sendEmail with params:
          template: YourContenterIgnoredTheChallenge
          data: ^challenge
          to: ^challenge.owner.email

    -> OfficiationRequestAccepted! :enrollment
        sendEmail with params:
          template: YourOfficiationRequestHaveBeenAccepted
          data: ^enrollment
          to: ^enrollment.player.email

    -> OfficiationRequestRejected! :challenge
        sendEmail with params:
          template: YourOfficiationRequestHaveBeenRejected
          data: ^challenge
          to: ^challenge.owner.email

    -> OfficiationResquestIgnored! :challenge
        sendEmail with params:
          template: YourOfficiationRequestHaveBeenIgnored
          data: ^challenge
          to: ^challenge.owner.email

    TODO://logic steps
    -> ContenderRemovedJudge! :officiation
        sendEmail with params:
          template: YourContenterRemovedYouFromJudgeRole
          data: ^officiation
          to: ^officiation.judge.email

    -> ContenderCanceledChallenge! :officiation
        sendEmail with params:
          template: YourContenterCanceledTheChallenge
          data: ^officiation
          to: ^officiation.judge.email

    -> WereTheContenderSuccessful! :officiation
        sendEmail with params:
          template: YourContenterWereTheySuccessful
          data: ^officiation
          to: ^officiation.judge.email

    -> ReminderToPlay! :challenge :invitee
        sendEmail with params:
          template: ReminderToPlay
          data: ^challenge
          to: ^challenge.invitee.email

    -> ReminderToOfficiate! :challenge :invitee
        sendEmail with params:
          template: ReminderToOfficiate
          data: ^challenge
          to: ^challenge.invitee.email

    -> ChallengeOngoing! :challenge
        sendEmail with params:
          template: ReminderToOfficiate
          data: ^challenge
          to: ^challenge.owner.email

    -> ChallengeCompleted! :challenge
        sendEmail with params:
          template: ChallengeCompleted
          data: ^challenge
          to: ^challenge.enrollments[0].player.email

    -> ChallengeFailed! :challenge
        sendEmail with params:
          template: ChallengeFailed
          data: ^challenge
          to: ^challenge.enrollments[0].player.email
